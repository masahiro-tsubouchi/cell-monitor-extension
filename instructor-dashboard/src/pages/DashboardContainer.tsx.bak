// DashboardContainer - Phase 2ストア統合版
import React, { useEffect } from 'react';
import { Box, AppBar, Toolbar, Typography, Button, IconButton } from '@mui/material';
import { ExitToApp as LogoutIcon } from '@mui/icons-material';
import { useAuthStore } from '../stores/authStore';
import { useDashboardStore } from '../stores/dashboardStore';
import Dashboard from './Dashboard';

export const DashboardContainer: React.FC = () => {
  const { instructor, logout } = useAuthStore();
  const {
    seats,
    helpRequests,
    students,
    isConnected,
    initializeDashboard,
    refreshData,
    handleSeatClick,
    handleHelpRequestClick,
    updateInstructorStatus
  } = useDashboardStore();

  // ダッシュボード初期化
  useEffect(() => {
    initializeDashboard();
  }, [initializeDashboard]);

  // ログアウト処理
  const handleLogout = async () => {
    await logout();
  };

  // インストラクター情報がない場合の処理
  if (!instructor) {
    return (
      <Box sx={{ p: 2 }}>
        <Typography>講師情報を読み込み中...</Typography>
      </Box>
    );
  }

  return (
    <Box sx={{ flexGrow: 1 }}>
      {/* アプリケーションバー */}
      <AppBar position="static" elevation={1}>
        <Toolbar>
          <Typography variant="h6" component="div" sx={{ flexGrow: 1 }}>
            講師支援ダッシュボード
          </Typography>

          <Typography variant="body2" sx={{ mr: 2 }}>
            {instructor.name} 先生
          </Typography>

          <Typography
            variant="body2"
            sx={{
              mr: 2,
              color: isConnected ? 'lightgreen' : 'orange',
              fontWeight: 'bold'
            }}
          >
            {isConnected ? '接続中' : '切断中'}
          </Typography>

          <IconButton
            color="inherit"
            onClick={handleLogout}
            title="ログアウト"
          >
            <LogoutIcon />
          </IconButton>
        </Toolbar>
      </AppBar>

      {/* ダッシュボードメインコンテンツ */}
      <Dashboard
        instructor={instructor ? {
          id: String(instructor.id),
          name: instructor.name,
          status: 'AVAILABLE' as UIInstructorStatus
        } : null}
        seats={seats.map(seat => ({
          id: `seat-${seat.seat_number}`,
          number: seat.seat_number,
          status: seat.status as UISeatStatus,
          position: { x: 0, y: 0 }, // デフォルト位置
          studentId: seat.student_id ? String(seat.student_id) : undefined,
          onClick: handleSeatClick
        }))}
        helpRequests={helpRequests.map(req => ({
          id: String(req.id),
          seatNumber: req.seat_number,
          studentId: String(req.student_id),
          studentName: req.student_name || 'Unknown',
          message: req.message,
          timestamp: req.created_at,
          urgency: req.urgency as UIUrgency,
          status: req.status as UIHelpRequestStatus,
          onClick: handleHelpRequestClick
        }))}
        onSeatClick={handleSeatClick}
        onHelpRequestClick={handleHelpRequestClick}
        onStatusChange={(status: UIInstructorStatus) => {
          updateInstructorStatus(status as APIInstructorStatus);
        }}
        onLogout={logout}
      />
    </Box>
  );
};
