# JupyterLab拡張機能開発：AI駆動開発完全ガイド
*Host環境 + Conda + AI支援による高速開発戦略*

## 🚀 AI駆動開発の概要

**このドキュメントは、LLM（ChatGPT、Claude等）による開発支援を前提に最適化されています。**

### 開発戦略
- **Host環境 + Conda**: 最高速の開発体験
- **AI駆動設計**: LLMによるコード生成・デバッグ支援
- **構造化ドキュメント**: AIが理解しやすい情報設計
- **段階的実装**: AI支援による段階的機能開発

---

## 📋 プロジェクト仕様書（AI参照用）

### ミッション
JupyterLabでセル実行履歴をキャプチャし、FastAPIサーバーに送信する拡張機能を開発。社内配布でGit直接 + 共有フォルダ配布を採用。

### 技術スタック
```yaml
フロントエンド:
  - TypeScript 5.x
  - JupyterLab 4.2.4 Extension API
  - Axios (HTTP通信)

バックエンド:
  - Python 3.12
  - FastAPI (データ受信サーバー)

開発環境:
  - macOS Host環境
  - Conda + mambaforge
  - Node.js 20 LTS

ライセンス:
  - MIT License（すべてのコンポーネントが商用利用可能）
```

### 機能要件
1. **セル実行監視**: NotebookActions.executed シグナルによるリアルタイム監視
2. **データキャプチャ**: セルID、コード、実行時刻、結果、エラー状態
3. **データ送信**: Axios経由でFastAPIサーバーにHTTP POST
4. **エラーハンドリング**: 接続失敗時のリトライ機能
5. **設定管理**: 送信先URL、バッチサイズ等の設定

---

## 🛠️ 開発環境セットアップ（AI実行用コマンド集）

### 初期環境構築
```bash
# 1. mambaforge環境作成
mamba create -n cell-monitor python=3.12 nodejs=20 jupyterlab=4.2.4 git copier yarn -c conda-forge
conda activate cell-monitor

# 2. macOS最適化設定
export NODE_OPTIONS="--max-old-space-size=8192"
export JUPYTER_CONFIG_DIR="$PWD/.jupyter"
export CHOKIDAR_USEPOLLING=false  # macOSネイティブFSEvents使用

# 3. プロジェクト作成
mkdir cell-monitor-extension && cd cell-monitor-extension
copier copy --trust https://github.com/jupyterlab/extension-template .

# プロジェクト名: cell-monitor
# Author: [あなたの名前]
# Repository: https://github.com/company/cell-monitor-extension
```

### 開発環境準備
```bash
# 4. 依存関係インストール
jlpm install
jlpm add axios @types/axios

# 5. 開発モード設定
jupyter labextension develop . --overwrite
jlpm run build

# 6. 開発サーバー起動（2ターミナル）
# ターミナル1: TypeScript監視
jlpm run watch

# ターミナル2: JupyterLab起動
jupyter lab --autoreload --no-browser --ip=127.0.0.1
```

---

## 🏗️ アーキテクチャ設計（AI参照用）

### ディレクトリ構造
```
cell-monitor-extension/
├── src/
│   ├── index.ts           # メインエントリーポイント
│   ├── monitor.ts         # セル実行監視クラス
│   ├── api-client.ts      # FastAPI通信クラス
│   ├── config.ts          # 設定管理
│   └── types.ts           # TypeScript型定義
├── style/
│   └── base.css          # 拡張機能CSS
├── package.json          # npm設定
├── pyproject.toml        # Python配布設定
└── README.md             # プロジェクト説明
```

### データフロー
```
1. JupyterLab Cell実行
   ↓
2. NotebookActions.executed シグナル発火
   ↓
3. CellMonitor.onCellExecuted() コールバック
   ↓
4. ExecutionData オブジェクト生成
   ↓
5. APIClient.sendExecutionData() 
   ↓
6. FastAPIサーバーにHTTP POST
```

---

## 💻 実装フェーズ（AI支援による段階的開発）

### Phase 1: 基本監視機能
**AIに依頼するタスク**: "JupyterLab 4.2.4のNotebookActions.executedシグナルを監視し、セル実行データをキャプチャするTypeScriptクラスを作成してください。"

```typescript
// src/types.ts (AI生成用テンプレート)
export interface CellExecutionData {
  cellId: string;
  code: string;
  executionCount: number | null;
  timestamp: string;
  success: boolean;
  executionTime?: number;
  outputs?: any[];
  error?: string;
}

export interface MonitorConfig {
  apiEndpoint: string;
  batchSize: number;
  retryAttempts: number;
  uploadInterval: number;
}
```

### Phase 2: HTTP通信実装
**AIに依頼するタスク**: "Axiosを使用してCellExecutionDataをFastAPIサーバーに送信し、エラーハンドリングとリトライ機能を含むAPIClientクラスを実装してください。"

```typescript
// src/api-client.ts (AI生成ガイド)
import axios, { AxiosInstance, AxiosError } from 'axios';
import { CellExecutionData, MonitorConfig } from './types';

export class CellMonitorAPIClient {
  // リトライ機能付きHTTPクライアント実装
  // バッチ送信機能
  // エラーハンドリング
  // 接続状態監視
}
```

### Phase 3: 設定システム
**AIに依頼するタスク**: "JupyterLab拡張機能の設定をJSON形式で管理し、UI経由で変更可能な設定システムを実装してください。"

### Phase 4: 統合とテスト
**AIに依頼するタスク**: "すべてのコンポーネントを統合し、JupyterLab拡張機能として動作する完全なindex.tsを作成してください。"

---

## 🤖 AI支援開発のプロンプトテンプレート

### コード生成プロンプト
```
【コンテキスト】
JupyterLab 4.2.4拡張機能を開発中。セル実行履歴をFastAPIに送信する機能を実装。
TypeScript、Axios使用。商用利用。

【技術仕様】
- JupyterLab Extension API
- NotebookActions.executed シグナル監視
- Axios HTTP通信
- エラーハンドリング必須

【生成依頼】
[具体的な実装内容を記述]

【期待する出力】
- 完全に動作するTypeScriptコード
- 適切な型定義
- エラーハンドリング
- JSDocコメント付き
```

### デバッグ支援プロンプト
```
【問題状況】
[エラーメッセージ、症状等]

【環境情報】
- JupyterLab 4.2.4
- TypeScript 5.x
- Node.js 20
- macOS Host環境

【関連コード】
[問題のあるコード]

【依頼】
原因分析と修正方法を提示してください。
```

---

## 📚 AI参照用ドキュメントセット

### JupyterLab API リファレンス
```typescript
// 重要なJupyterLab APIの概要（AI学習用）

// アプリケーション取得
import { JupyterFrontEnd } from '@jupyterlab/application';

// ノートブック操作
import { NotebookActions } from '@jupyterlab/notebook';
import { INotebookTracker } from '@jupyterlab/notebook';

// シグナル監視
NotebookActions.executed.connect((_, args) => {
  // args.cell: 実行されたセル
  // args.notebook: ノートブックパネル
  // args.success: 実行成功フラグ
  // args.error: エラー情報
});

// セル情報アクセス
const cell = args.cell;
const code = cell.model.value.text;
const executionCount = cell.model.executionCount;
const outputs = cell.model.outputs;
```

### FastAPI統合パターン
```python
# 受信側FastAPIサーバー実装例（AI参考用）
from fastapi import FastAPI
from pydantic import BaseModel
from typing import List, Optional
import datetime

app = FastAPI()

class CellExecutionData(BaseModel):
    cell_id: str
    code: str
    execution_count: Optional[int]
    timestamp: str
    success: bool
    execution_time: Optional[float] = None
    outputs: Optional[List] = None
    error: Optional[str] = None

@app.post("/api/cell-executions")
async def receive_execution_data(data: CellExecutionData):
    # データ処理ロジック
    return {"status": "success", "received_at": datetime.datetime.now()}
```

---

## 🔧 開発ワークフロー（AI統合）

### 日常開発サイクル
1. **計画**: AIに機能仕様を説明し、実装戦略を相談
2. **実装**: AIにコード生成を依頼、生成されたコードをレビュー
3. **テスト**: 動作確認、問題があればAIにデバッグ支援を依頼
4. **リファクタリング**: AIにコード最適化を依頼
5. **ドキュメント化**: AIに技術文書作成を依頼

### AI活用ポイント
- **コード生成**: 定型的な実装をAIに委任
- **エラー解決**: スタックトレースをAIに分析させる
- **設計レビュー**: アーキテクチャの妥当性をAIに相談
- **テストケース作成**: AIにユニットテスト生成を依頼

---

## 📦 配布準備（AI自動化）

### ビルド自動化スクリプト
```bash
#!/bin/bash
# deploy.sh - AI生成可能なスクリプト
echo "🚀 JupyterLab拡張機能配布準備中..."

# バージョン取得
VERSION=$(node -p "require('./package.json').version")

# クリーンビルド
jlpm run clean:all
jlpm install
jlpm run build:prod

# Python配布パッケージ作成
python -m build

# Git リリース作成
git add .
git commit -m "Release v${VERSION}"
git tag "v${VERSION}"
git push origin main --tags

echo "✅ 配布準備完了: v${VERSION}"
```

### 社内配布ドキュメント
**AIに自動生成させるドキュメント**:
- インストールガイド
- 機能説明書
- トラブルシューティング
- 設定変更手順

---

## 🎯 成功メトリクス

### 開発効率指標
- **コード生成速度**: AI支援による実装時間短縮
- **バグ修正速度**: AI診断による問題解決時間
- **ドキュメント品質**: AI生成文書の完成度

### 拡張機能KPI
- セル実行キャプチャ率: 99%以上
- データ送信成功率: 95%以上
- ユーザー採用率: 社内50%以上

---

## 🔄 継続的改善

### AI支援による機能拡張
1. **ユーザーフィードバック解析**: AIによる要望分析
2. **パフォーマンス最適化**: AIによるボトルネック特定
3. **新機能設計**: AIとの協働による機能企画
4. **コード品質向上**: AIによる継続的リファクタリング

---

**このドキュメントはAI駆動開発を前提に設計されており、各セクションをLLMに提示することで効率的な開発支援を受けることができます。プロジェクトの進行に応じて、関連セクションをAIに参照させて開発を進めてください。**