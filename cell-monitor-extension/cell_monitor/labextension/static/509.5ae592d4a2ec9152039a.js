"use strict";(self.webpackChunkcell_monitor=self.webpackChunkcell_monitor||[]).push([[509],{509:(e,t,o)=>{o.r(t),o.d(t,{default:()=>h});var r=o(904),n=o(805),s=o(341),a=o(679),l=o(801),c=o.n(l);function d(){return"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g,function(e){const t=16*Math.random()|0;return("x"===e?t:3&t|8).toString(16)})}let i="";function u(){let e=p.userId;const t=p.userName||"Anonymous";return e&&e.length>0?(i=e,{userId:e,userName:t}):(i&&i.length>0||(i=d()),{userId:i,userName:t})}let m="",g=d(),p={serverUrl:"http://localhost:8000/student-progress",userId:"",userName:"Anonymous",batchSize:1,retryAttempts:3,maxNotifications:3};const x={id:"cell-monitor:plugin",autoStart:!0,requires:[s.INotebookTracker,a.ISettingRegistry,r.ILabShell],activate:(e,t,o,r)=>{console.log("JupyterLab extension cell-monitor is activated!"),n.Notification.success("Cell Monitor Activated",{autoClose:2e3}),g=d(),o.load(x.id).then(e=>{console.log("JupyterLab extension cell-monitor: settings loaded.");const t=e.schema;console.log("Schema loaded:",t.title,t.description),m=e.get("serverUrl").composite,p.serverUrl=m;const o=e.get("userId").composite,r=e.get("userName").composite;if(p.userId=o||"",p.userName=r||"Anonymous",o&&o.length>0)i=o,console.log("User ID set from settings:",i);else{const e=u();console.log("Generated user ID will be used:",e.userId)}p.retryAttempts=e.get("retryAttempts").composite,console.log("Server URL set to:",m),console.log("User settings - ID:",p.userId||"<auto-generated>","Name:",p.userName);const n=e.get("maxNotifications").composite;console.log("Max notifications:",n)}).catch(e=>{console.error("Failed to load cell-monitor settings",e)});const a=async e=>{if(0===e.length)return;let t=0;for(;t<=p.retryAttempts;)try{await c().post(p.serverUrl,e),console.log("Student progress data sent successfully:",e.length,"events"),e.length>0&&n.Notification.info(`Learning data sent (${e.length} events)`,{autoClose:3e3});break}catch(e){if(console.error("Failed to send student progress data:",e),t++,t>p.retryAttempts){console.error("Max retry attempts reached. Progress data will be lost.");break}await new Promise(e=>setTimeout(e,1e3*Math.pow(2,t-1)))}};t.currentChanged.connect(()=>{var e;t.currentWidget&&(s.NotebookActions.executed.connect((e,o)=>{const{cell:r}=o;(e=>{var o;try{if(!e||!e.model)return;const r=performance.now(),n=e.model.id;let s="";try{e.model.sharedModel&&e.model.sharedModel.source?s=e.model.sharedModel.source:e.model.value&&e.model.value.text?s=e.model.value.text:e.editor&&e.editor.model&&e.editor.model.value&&(s=e.editor.model.value.text)}catch(e){console.warn("Failed to get cell code:",e)}const l=t.currentWidget;if(!l)return;const i=(null===(o=l.context)||void 0===o?void 0:o.path)||"";let m,x;try{const t=l.content.widgets;for(let e=0;e<t.length;e++)if(t[e].model.id===n){m=e;break}e.model.type&&(x=e.model.type)}catch(e){console.warn("Failed to get cell index or type:",e)}let h,y=!1,v="",I="";if(e.outputArea){try{h=e.model.executionCount||void 0}catch(e){console.warn("Failed to get execution count:",e)}const t=e.outputArea.model.toJSON();for(const e of t){if("error"===e.output_type){y=!0,I=`${e.ename}: ${e.evalue}`,v=I;break}"execute_result"!==e.output_type&&"display_data"!==e.output_type||e.data&&e.data["text/plain"]&&(v=e.data["text/plain"])}}const f=performance.now(),b=Math.round(f-r),{userId:w,userName:N}=u(),k={cellId:n,code:s,executionTime:(new Date).toISOString(),result:v,hasError:y,notebookPath:i},S={eventId:d(),eventType:"cell_executed",eventTime:(new Date).toISOString(),userId:w,userName:N,sessionId:g,notebookPath:i,cellId:n,cellIndex:m,cellType:x,code:s,executionCount:h,hasError:y,errorMessage:y?I:void 0,result:v,executionDurationMs:b};(async e=>{if(0===e.length)return;let t=0;const o=p.serverUrl.replace("student-progress","cell-monitor");for(;t<=p.retryAttempts;)try{await c().post(o,e),console.log("Legacy cell execution data sent successfully:",e.length,"items");break}catch(e){if(console.error("Failed to send legacy cell execution data:",e),t++,t>p.retryAttempts){console.error("Max retry attempts reached. Legacy data will be lost.");break}await new Promise(e=>setTimeout(e,1e3*Math.pow(2,t-1)))}})([k]),a([S])}catch(e){console.error("Error processing cell execution:",e)}})(r)}),r.currentChanged.connect((e,t)=>{const o=t.oldValue;if(o&&o.hasOwnProperty("context")&&o.context&&o.context.path){const e=o.context.path,{userId:t,userName:r}=u(),n={eventId:d(),eventType:"notebook_closed",eventTime:(new Date).toISOString(),userId:t,userName:r,sessionId:g,notebookPath:e};a([n])}}),console.log("Cell execution tracker added to",null===(e=t.currentWidget)||void 0===e?void 0:e.context.path),o.load(x.id).then(e=>{m=e.get("serverUrl").composite,p.serverUrl=m,p.userId=e.get("userId").composite||"",p.userName=e.get("userName").composite||"Anonymous",p.retryAttempts=e.get("retryAttempts").composite,t.widgetAdded.connect((e,t)=>{var o;const{userId:r,userName:n}=u(),s={eventId:d(),eventType:"notebook_opened",eventTime:(new Date).toISOString(),userId:r,userName:n,sessionId:g,notebookPath:t.context.path};a([s]),t.context.saveState.stateChanged.connect((e,o)=>{if("completed"===o){const{userId:e,userName:o}=u(),r={eventId:d(),eventType:"notebook_saved",eventTime:(new Date).toISOString(),userId:e,userName:o,sessionId:g,notebookPath:t.context.path};a([r])}}),null===(o=t.content.model)||void 0===o||o.contentChanged.connect(()=>{console.debug("notebook content changed")})})}))})}},h=x}}]);