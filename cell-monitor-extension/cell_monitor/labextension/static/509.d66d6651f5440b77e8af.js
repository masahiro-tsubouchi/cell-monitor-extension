"use strict";(self.webpackChunkcell_monitor=self.webpackChunkcell_monitor||[]).push([[509],{509:(e,t,o)=>{o.r(t),o.d(t,{default:()=>s});var r=o(341),l=o(679),c=o(801),n=o.n(c);const a={id:"cell-monitor:plugin",autoStart:!0,requires:[r.INotebookTracker],optional:[l.ISettingRegistry],activate:(e,t,o)=>{console.log("JupyterLab extension cell-monitor is activated!");let l={serverUrl:"http://localhost:8000/cell-monitor",batchSize:1,retryAttempts:3};const c=[];o&&o.load(a.id).then(e=>{l={serverUrl:e.get("serverUrl").composite,batchSize:e.get("batchSize").composite,retryAttempts:e.get("retryAttempts").composite},console.log("cell-monitor settings loaded:",l)}).catch(e=>{console.error("Failed to load cell-monitor settings",e)});t.currentChanged.connect(()=>{t.currentWidget&&r.NotebookActions.executed.connect((e,o)=>{(e=>{var o;try{if(!e||!e.model)return;const r=e.model.id,a=e.model.value.text,s=(null===(o=t.currentWidget)||void 0===o?void 0:o.context.path)||"",i=e.model.outputs;let d=!1,u="";if(i.length>0)for(let e=0;e<i.length;e++){const t=i.get(e);if("error"===t.type){d=!0,u=t.evalue||"Error occurred";break}"execute_result"!==t.type&&"display_data"!==t.type||t.data["text/plain"]&&(u=t.data["text/plain"])}const p={cellId:r,code:a,executionTime:(new Date).toISOString(),result:u,hasError:d,notebookPath:s};if(c.push(p),c.length>=l.batchSize){const e=[...c];c.length=0,(async e=>{if(0===e.length)return;let t=0;for(;t<=l.retryAttempts;)try{await n().post(l.serverUrl,e),console.log("Cell execution data sent successfully:",e.length,"items");break}catch(e){if(console.error("Failed to send cell execution data:",e),t++,t>l.retryAttempts){console.error("Max retry attempts reached. Data will be lost.");break}await new Promise(e=>setTimeout(e,1e3*Math.pow(2,t-1)))}})(e)}}catch(e){console.error("Error processing cell execution:",e)}})(o.cell)})})}},s=a}}]);